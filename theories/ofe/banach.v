From sgdt Require Import ofe .
From Coq Require Import ssreflect Lia.

(* Definition of a chain generated by repeatedly applying a function *)
Fixpoint f_chain {A : ofe} (f : A -> A) (x : A) (n : nat) : A :=
  match n with
  | 0 => f x  (* Base case: apply f to x *)
  | S n => f (f_chain f x n)  (* Recursive case: apply f to the result of F n *)
 end.

(* Lemma stating that the chain at S n is f applied to the chain at n *)
Lemma f_chain_rw_1  {A : ofe} (f : A -> A) (x : A) n :
  f_chain f x (S n) = f (f_chain f x n).
Proof. reflexivity. Qed.

(* Lemma stating that the chain at n is f applied to some element *)
Lemma f_chain_rw_2  {A : ofe} (f : A -> A) (x : A) (n : nat) :
  exists y, f_chain f x n = f y.
Proof. destruct n ; simpl ; eauto. Qed.

(* Definition of a Cauchy chain generated by a contractive function *)
Program Definition f_contractive_chain {A : ofe} (f : A -c> A) (x : A) : cchain A :=
  {| chain n := f_chain f x n |}.  (* Define the chain as the sequence generated by f *)
Next Obligation.
  revert m H.
  induction n ; intros m Hm ; simpl.
  - destruct (f_chain_rw_2 f x m) as [y ->]. apply hom_ctr. intros k Hk; lia.  (* Base case: use contractiveness *)
  - destruct m ; [lia | ]. simpl. (* Recursive case: use contractiveness and monotonicity *)
    apply hom_ctr.  intros k Hk.
    specialize (IHn m ltac:(lia)).
    eapply ofe_mono with (n := n) ; [assumption|lia].
Qed.

(* Banach Fixed-Point Theorem for COFEs *)
Lemma banach_fixed_point {A : cofe} (f : A -c> A) (x : A)   :
  { y & y = f y }.  (* There exists a fixed point y such that y = f y *)
Proof.
  set (Hy := conv_compl A (f_contractive_chain f x)).  (* Use the completion of the chain *)
  exists (compl A (f_contractive_chain f x)). apply ofe_eq. 
  intros n. induction n ; simpl.
  - specialize (Hy 0). simpl in Hy. transitivity (f x) ; [done|].
    apply hom_ctr. intros m Hm. lia.  (* Base case: use contractiveness *)
  - transitivity (f_chain f x (S n)).
    + by specialize (Hy (S n)).  (* Use convergence of the chain *)
    + specialize (Hy n). simpl in Hy. (* Recursive case: use contractiveness and monotonicity *)
      rewrite f_chain_rw_1. apply hom_ctr; intros m Hm. 
      apply ofe_mono with (n := n) ; [rewrite Hy ; reflexivity |lia].
Qed.

(* Banach Fixed-Point Theorem for inhabited COFEs *)
Lemma ibanach_fixed_point {A : icofe} (f : A -c> A)  :
  { y & y = f y }.  (* There exists a fixed point y such that y = f y *)
Proof. apply banach_fixed_point; apply icofe_inh. Qed.  (* Use the inhabitant of the COFE *)

(* Lemma stating that the fixed point of a contractive function is unique *)
Lemma fixpoint_unique {A : cofe} (f : A -c> A) (H1 H2 : {y & y = f y}) :
  projT1 H1 = projT1 H2.  (* The fixed points are equal *)
Proof.
  destruct H1 as [y1 H1], H2 as [y2 H2] ; simpl.
  rewrite H1 H2.
  apply ofe_eq; intros;
  induction n .
  - apply hom_ctr; intros m Hm; lia.  (* Base case: use contractiveness *)
  - rewrite H1 H2. apply hom_ctr.
    intros m Hm. eapply ofe_mono with (n := n) ; eauto. lia.  (* Recursive case: use contractiveness and monotonicity *)
Qed.
